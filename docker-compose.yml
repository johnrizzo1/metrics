---
services:
  # read:
  #   image: grafana/loki:latest
  #   command: "-config.file=/etc/loki/config.yaml -target=read"
  #   # ports:
  #   #   - 3101:3100
  #   #   - 7946
  #   #   - 9095
  #   configs:
  #     - source: loki-config.yaml
  #       target: /etc/loki/config.yaml
  #   depends_on:
  #     - minio
  #   healthcheck:
  #     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   # networks: &loki-dns
  #   #   loki:
  #   #     aliases:
  #   #       - loki
  #   network_mode: service:tailscale

  # write:
  #   image: grafana/loki:latest
  #   command: "-config.file=/etc/loki/config.yaml -target=write"
  #   # ports:
  #   #   - 3102:3100
  #   #   - 7946
  #   #   - 9095
  #   configs:
  #     - source: loki-config.yaml
  #       target: /etc/loki/config.yaml
  #   # volumes:
  #     # - ./loki-config.yaml:/etc/loki/config.yaml
  #   healthcheck:
  #     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   depends_on:
  #     - minio
  #   # networks:
  #   #   <<: *loki-dns
  #   network_mode: service:tailscale

  alloy:
    image: grafana/alloy:latest
    configs:
      - source: alloy-local-config.yaml
        target: /etc/alloy/config.alloy:ro
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    # ports:
    #   - 12345:12345
    depends_on:
      - gateway
    # networks:
    #   - loki
    network_mode: service:tailscale

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    env_file: stack.env
    # ports:
    #   - 9000
    volumes:
      - minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    # networks:
    #   - loki
    network_mode: service:tailscale

  grafana:
    image: grafana/grafana:latest
    env_file: stack.env
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    # ports:
    #   - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # networks:
    #   - loki
    network_mode: service:tailscale

  backend:
    image: grafana/loki:latest
    configs:
      - source: loki-config.yaml
        target: /etc/loki/config.yaml
    # ports:
    #   - "3100"
    #   - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=all -legacy-read-mode=false"
    depends_on:
      - gateway
    # networks:
    #   - loki
    network_mode: service:tailscale
    
  gateway:
    image: nginx:latest
    # depends_on:
    #   - read
    #   - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.1;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    # ports:
    #   - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    # networks:
    #   - loki
    network_mode: service:tailscale

  flog:
    image: mingrammer/flog
    command: -f json -d 200ms -l
    # networks:
    #   - loki

  tailscale:
    image: tailscale/tailscale:latest
    container_name: metrics-tailscale
    hostname: metrics.warthog-trout.ts.net
    restart: unless-stopped
    # dns:
    #   - 192.168.2.124
    volumes:
      - tailscale:/var/lib/tailscale
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_HOSTNAME: metrics
      TS_STATE_DIR: /var/lib/tailscale

configs:
  loki-config.yaml:
    content: |
      server:
        http_listen_address: 0.0.0.0
        http_listen_port: 3100

      memberlist:
        join_members: ["read", "write", "backend"]
        dead_node_reclaim_time: 30s
        gossip_to_dead_nodes_time: 15s
        left_ingesters_timeout: 30s
        bind_addr: ['0.0.0.0']
        bind_port: 7946
        gossip_interval: 2s

      schema_config:
        configs:
          - from: 2023-01-01
            store: tsdb
            object_store: s3
            schema: v13
            index:
              prefix: index_
              period: 24h
      common:
        path_prefix: /loki
        replication_factor: 1
        compactor_address: http://metrics.warthog-trout.ts.net:3100
        storage:
          s3:
            endpoint: minio:9000
            insecure: true
            bucketnames: loki-data
            access_key_id: loki
            secret_access_key: supersecret
            s3forcepathstyle: true
        ring:
          kvstore:
            store: memberlist
      ruler:
        storage:
          s3:
            bucketnames: loki-ruler

      compactor:
        working_directory: /tmp/compactor
  alloy-local-config.yaml:
    content: |
      discovery.docker "flog_scrape" {
        host             = "unix:///var/run/docker.sock"
        refresh_interval = "5s"
      }

      discovery.relabel "flog_scrape" {
        targets = []

        rule {
          source_labels = ["__meta_docker_container_name"]
          regex         = "/(.*)"
          target_label  = "container"
        }
      }

      loki.source.docker "flog_scrape" {
        host             = "unix:///var/run/docker.sock"
        targets          = discovery.docker.flog_scrape.targets
        forward_to       = [loki.write.default.receiver]
        relabel_rules    = discovery.relabel.flog_scrape.rules
        refresh_interval = "5s"
      }

      loki.write "default" {
        endpoint {
          url       = "http://metrics.warthog-trout.ts.net:3100/loki/api/v1/push"
          tenant_id = "tenant1"
        }
        external_labels = {}
      }

# networks:
#   loki:

volumes:
  minio:
  tailscale: