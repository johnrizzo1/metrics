---
services:
  # alloy:
    # image: grafana/alloy:latest
    # configs:
      # - source: alloy-local-config.yaml
        # target: /etc/alloy/config.alloy:ro
    # volumes:
      # - /var/run/docker.sock:/var/run/docker.sock
      # - alloy_data:/var/lib/alloy/data
    # command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    # depends_on:
      # - backend
      # - gateway
    # network_mode: service:tailscale

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    env_file: stack.env
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    network_mode: service:ts-minio
  ts-minio:
    image: tailscale/tailscale:latest
    container_name: ts-minio
    hostname: minio.warthog-trout.ts.net
    restart: unless-stopped
    volumes:
      - ts-minio:/var/lib/tailscale
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_HOSTNAME: minio
      TS_STATE_DIR: /var/lib/tailscale

  # grafana:
    # image: grafana/grafana:latest
    # env_file: stack.env
    # depends_on:
      # - backend
      # - gateway
    # entrypoint:
      # - sh
      # - -euc
      # - |
        # mkdir -p /etc/grafana/provisioning/datasources
        # cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        # apiVersion: 1
        # datasources:
          # - name: Loki
            # type: loki
            # access: proxy
            # url: http://metrics.warthog-trout.ts.net:3100
            # jsonData:
              # httpHeaderName1: "X-Scope-OrgID"
            # secureJsonData:
              # httpHeaderValue1: "tenant1"
        # EOF
        # /run.sh
    # healthcheck:
      # test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      # interval: 10s
      # timeout: 5s
      # retries: 5
    # network_mode: service:ts-grafana

  loki:
    image: grafana/loki:latest
    configs:
      - source: loki-config.yaml
        target: /etc/loki/config.yaml
    command: "-config.file=/etc/loki/config.yaml -target=all -legacy-read-mode=false"
    depends_on:
      - gateway
    network_mode: service:ts-loki
  ts-loki:
    image: tailscale/tailscale:latest
    container_name: ts-loki
    hostname: loki.warthog-trout.ts.net
    restart: unless-stopped
    volumes:
      - ts-loki:/var/lib/tailscale
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_HOSTNAME: loki
      TS_STATE_DIR: /var/lib/tailscale 

  gateway:
    image: nginx:latest
    configs:
      - source: nginx_conf
        target: /etc/nginx/nginx.conf
    entrypoint:
      - sh
      - -euc
      - /docker-entrypoint.sh nginx -g "daemon off;"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    network_mode: service:ts-gateway

  ts-gateway:
    image: tailscale/tailscale:latest
    container_name: ts-gateway
    hostname: gateway.warthog-trout.ts.net
    restart: unless-stopped
    volumes:
      - ts-gateway:/var/lib/tailscale
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_HOSTNAME: gateway
      TS_STATE_DIR: /var/lib/tailscale

  flog:
    image: mingrammer/flog
    command: -f json -d 200ms -l

configs:
  loki-config.yaml:
    content: |
      server:
        http_listen_address: 0.0.0.0
        http_listen_port: 3200

      # memberlist:
      #   join_members: ["metrics.warthog-trout.ts.net"]
      #   dead_node_reclaim_time: 30s
      #   gossip_to_dead_nodes_time: 15s
      #   left_ingesters_timeout: 30s
      #   bind_addr: ['0.0.0.0']
      #   bind_port: 7946
      #   gossip_interval: 2s

      schema_config:
        configs:
          - from: 2023-01-01
            store: tsdb
            object_store: s3
            schema: v13
            index:
              prefix: index_
              period: 24h
      common:
        path_prefix: /loki
        replication_factor: 1
        # compactor_address: http://metrics.warthog-trout.ts.net:3100
        storage:
          s3:
            endpoint: minio.warthog-trout.ts.net:9000
            insecure: true
            bucketnames: loki-data
            access_key_id: ${MINIO_ROOT_USER}
            secret_access_key: ${MINIO_ROOT_PASSWORD}
            s3forcepathstyle: true
        ring:
          kvstore:
            store: inmemory
      ruler:
        storage:
          s3:
            bucketnames: loki-ruler
      compactor:
        working_directory: /tmp/compactor
  alloy-local-config.yaml:
    content: |
      discovery.docker "flog_scrape" {
        host             = "unix:///var/run/docker.sock"
        refresh_interval = "5s"
      }

      discovery.relabel "flog_scrape" {
        targets = []

        rule {
          source_labels = ["__meta_docker_container_name"]
          regex         = "/(.*)"
          target_label  = "container"
        }
      }

      loki.source.docker "flog_scrape" {
        host             = "unix:///var/run/docker.sock"
        targets          = discovery.docker.flog_scrape.targets
        forward_to       = [loki.write.default.receiver]
        relabel_rules    = discovery.relabel.flog_scrape.rules
        refresh_interval = "5s"
      }

      loki.write "default" {
        endpoint {
          url       = "http://metrics.warthog-trout.ts.net:3200/loki/api/v1/push"
          tenant_id = "tenant1"
        }
        external_labels = {}
      }
  nginx_conf:
    content: |
      user  nginx;
      worker_processes  5;  ## Default: 1

      events {
        worker_connections   1000;
      }

      http {
        resolver 127.0.0.1;

        server {
          listen             3100;

          location = / {
            return 200 'OK';
            auth_basic off;
          }

          location = /api/prom/push {
            proxy_pass       http://loki.warthog-trout.ts.net:3200\$$request_uri;
          }

          location = /api/prom/tail {
            proxy_pass       http://loki.warthog-trout.ts.net:3200\$$request_uri;
            proxy_set_header Upgrade \$$http_upgrade;
            proxy_set_header Connection "upgrade";
          }

          location ~ /api/prom/.* {
            proxy_pass       http://loki.warthog-trout.ts.net:3200\$$request_uri;
          }

          location = /loki/api/v1/push {
            proxy_pass       http://loki.warthog-trout.ts.net:3200\$$request_uri;
          }

          location = /loki/api/v1/tail {
            proxy_pass       http://loki.warthog-trout.ts.net:3200\$$request_uri;
            proxy_set_header Upgrade \$$http_upgrade;
            proxy_set_header Connection "upgrade";
          }

          location ~ /loki/api/.* {
            proxy_pass       http://loki.warthog-trout.ts.net:3200\$$request_uri;
          }
        }
      }

volumes:
  ts-minio:
  minio_data:

  ts-gateway:

  ts-loki: