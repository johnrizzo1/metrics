---
services:
  alloy:
    image: grafana/alloy:latest
    configs:
      - source: alloy-local-config.yaml
        target: /etc/alloy/config.alloy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - alloy_data:/var/lib/alloy/data
    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - loki
    network_mode: service:ts-alloy
  ts-alloy:
    image: tailscale/tailscale:latest
    container_name: ts-alloy
    hostname: alloy.warthog-trout.ts.net
    restart: unless-stopped
    volumes:
      - ts-alloy:/var/lib/tailscale
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_HOSTNAME: alloy
      TS_STATE_DIR: /var/lib/tailscale

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data --console-address ":9001"
    env_file: stack.env
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    network_mode: service:ts-minio
  ts-minio:
    image: tailscale/tailscale:latest
    container_name: ts-minio
    hostname: minio.warthog-trout.ts.net
    restart: unless-stopped
    volumes:
      - ts-minio:/var/lib/tailscale
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_HOSTNAME: minio
      TS_STATE_DIR: /var/lib/tailscale

  grafana:
    image: grafana/grafana:latest
    env_file: stack.env
    depends_on:
      - loki
      - prometheus
    configs:
      - source: grafana-config.yaml
        target: /etc/grafana/provisioning/datasources/ds.yaml
    entrypoint:
      - sh
      - -euc
      - /run.sh
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    network_mode: service:ts-grafana
  ts-grafana:
    image: tailscale/tailscale:latest
    container_name: ts-grafana
    hostname: grafana.warthog-trout.ts.net
    restart: unless-stopped
    volumes:
      - ts-grafana:/var/lib/tailscale
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_HOSTNAME: grafana
      TS_STATE_DIR: /var/lib/tailscale

  loki:
    image: grafana/loki:latest
    configs:
      - source: loki-config.yaml
        target: /etc/loki/config.yaml
    command: "-config.file=/etc/loki/config.yaml -target=all -legacy-read-mode=false"
    network_mode: service:ts-loki
  ts-loki:
    image: tailscale/tailscale:latest
    container_name: ts-loki
    hostname: loki.warthog-trout.ts.net
    restart: unless-stopped
    volumes:
      - ts-loki:/var/lib/tailscale
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_HOSTNAME: loki
      TS_STATE_DIR: /var/lib/tailscale 

  prometheus:
    image: prom/prometheus:v2.53.3
    configs:
      - source: prometheus.yml
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_web.yml
        target: /etc/prometheus/web.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
      - --web.config.file=/etc/prometheus/web.yml
    volumes:
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
  ts-prometheus:
    image: tailscale/tailscale:latest
    container_name: ts-prometheus
    hostname: prometheus.warthog-trout.ts.net
    restart: unless-stopped
    volumes:
      - ts-prometheus:/var/lib/tailscale
    environment:
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_HOSTNAME: prometheus
      TS_STATE_DIR: /var/lib/tailscale

  # flog:
  #   image: mingrammer/flog
  #   command: -f json -d 200ms -l

configs:
  loki-config.yaml:
    content: |
      server:
        http_listen_address: 0.0.0.0
        http_listen_port: 3100
      schema_config:
        configs:
          - from: 2023-01-01
            store: tsdb
            object_store: s3
            schema: v13
            index:
              prefix: index_
              period: 24h
      common:
        path_prefix: /loki
        replication_factor: 1
        storage:
          s3:
            endpoint: minio.warthog-trout.ts.net:9000
            insecure: true
            bucketnames: loki-data
            access_key_id: ${MINIO_ROOT_USER}
            secret_access_key: ${MINIO_ROOT_PASSWORD}
            s3forcepathstyle: true
        ring:
          kvstore:
            store: inmemory
      ruler:
        storage:
          s3:
            bucketnames: loki-ruler
      compactor:
        working_directory: /tmp/compactor
  alloy-local-config.yaml:
    content: |
      discovery.docker "flog_scrape" {
        host             = "unix:///var/run/docker.sock"
        refresh_interval = "5s"
      }

      discovery.relabel "flog_scrape" {
        targets = []

        rule {
          source_labels = ["__meta_docker_container_name"]
          regex         = "/(.*)"
          target_label  = "container"
        }
      }

      loki.source.docker "flog_scrape" {
        host             = "unix:///var/run/docker.sock"
        targets          = discovery.docker.flog_scrape.targets
        forward_to       = [loki.write.default.receiver]
        relabel_rules    = discovery.relabel.flog_scrape.rules
        refresh_interval = "5s"
      }

      loki.write "default" {
        endpoint {
          url       = "http://loki.warthog-trout.ts.net:3100/loki/api/v1/push"
          tenant_id = "tenant1"
        }
        external_labels = {}
      }

      prometheus.exporter.unix "local_system" { }

      prometheus.scrape "scrape_metrics" {
        targets         = prometheus.exporter.unix.local_system.targets
        forward_to      = [prometheus.relabel.filter_metrics.receiver]
        scrape_interval = "10s"
      }

      prometheus.relabel "filter_metrics" {
        rule {
          action        = "drop"
          source_labels = ["env"]
          regex         = "dev"
        }

        forward_to = [prometheus.remote_write.metrics_service.receiver]
      }

      prometheus.remote_write "metrics_service" {
        endpoint {
            url = "http://prometheus.warthog-trout.ts.net:9090/api/v1/write"

            // basic_auth {
            //   username = "admin"
            //   password = "admin"
            // }
        }
      }
  prometheus.yml:
    content: |
      global:
        scrape_interval: 15s
      scrape_configs:
        - job_name: 'prometheus'
          scrape_interval: 5s
          static_configs:
          - targets: ['localhost:9090']
  prometheus_web.yml:
    content: |
      # http:
      #   tls_config:
      #     cert_file: /run/secrets/prometheus.crt
      #     key_file: /run/secrets/prometheus.key
      basic_auth_users:
  grafana-config.yaml:
    content: |
      apiVersion: 1
      users:
        allow_sign_up: false
        auto_assign_org: true
        auto_assign_org_role: Editor
      auth:
        proxy:
          enabled: true
          header_name: X-WEBAUTH-USER
          org_id: tenant1
          org_role: Editor
      datasources:
        - name: Loki
          type: loki
          access: proxy
          url: http://loki.warthog-trout.ts.net:3100
          jsonData:
            httpHeaderName1: "X-Scope-OrgID"
          secureJsonData:
            httpHeaderValue1: "tenant1"
        - name: Prometheus
          type: prometheus
          access: proxy
          orgId: tenant1
          url: http://prometheus.warthog-trout.ts.net:9090
          basicAuth: true
          isDefault: true
          version: 1
          editable: false

volumes:
  ts-minio:
  minio_data:
  ts-prometheus:
  ts-loki:
  ts-alloy:
  alloy_data:
  ts-grafana:
  prometheus_data: